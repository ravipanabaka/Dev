{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFRK"
		},
		"LinkedAzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedAzureBlobStorage'"
		},
		"LinkedAzureBlobStorageravi_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedAzureBlobStorageravi'"
		},
		"LinkedAzureDataLakeStore_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'LinkedAzureDataLakeStore'"
		},
		"LinkedAzureDatabricksrk_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'LinkedAzureDatabricksrk'"
		},
		"LinkedServiceAzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedServiceAzureBlobStorage'"
		},
		"LinkedServiceAzureBlobStorageDept_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedServiceAzureBlobStorageDept'"
		},
		"LinkedServiceAzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedServiceAzureSqlDatabase'"
		},
		"LinkedServiceCosmosDbMongoDbApi_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedServiceCosmosDbMongoDbApi'"
		},
		"LinkedserviceAzureBlobStorageEmp_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LinkedserviceAzureBlobStorageEmp'"
		},
		"LnkedsrvAzureSynapseAnalyticsrk_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LnkedsrvAzureSynapseAnalyticsrk'"
		},
		"Parameterize_LinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Parameterize_LinkedService'"
		},
		"linkedServiceDataLake_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'linkedServiceDataLake'"
		},
		"LinkedAzureDataLakeStore_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://datalakeravi.azuredatalakestore.net/webhdfs/v1"
		},
		"LinkedAzureDataLakeStore_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "06132eef-14f8-46a5-87fc-d31764adf060"
		},
		"LinkedAzureDataLakeStore_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "93f33571-550f-43cf-b09f-cd331338d086"
		},
		"LinkedAzureDataLakeStore_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "047ae087-7d35-4c57-8fe9-7a442cc9cf16"
		},
		"LinkedAzureDataLakeStore_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "BigData_COE"
		},
		"LinkedServiceCosmosDbMongoDbApi_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "admin"
		},
		"RestServiceEMP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://dummy.restapiexample.com/api/v1/employees"
		},
		"linkedServiceDataLake_properties_typeProperties_dataLakeStoreUri": {
			"type": "string",
			"defaultValue": "https://datalakeravi.azuredatalakestore.net/webhdfs/v1"
		},
		"linkedServiceDataLake_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "06132eef-14f8-46a5-87fc-d31764adf060"
		},
		"linkedServiceDataLake_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "93f33571-550f-43cf-b09f-cd331338d086"
		},
		"linkedServiceDataLake_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "047ae087-7d35-4c57-8fe9-7a442cc9cf16"
		},
		"linkedServiceDataLake_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "BigData_COE"
		},
		"Loadoncondition_properties_Pipeline_VariableTestLoad_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"Loadoncondition_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/047ae087-7d35-4c57-8fe9-7a442cc9cf16/resourceGroups/BigData_COE/providers/Microsoft.Storage/storageAccounts/ravistorag1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyRestEMP_Lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data rest lake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureDataLakeStoreWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"ordinal": 1
										}
									},
									{
										"source": {
											"path": "$['data'][0]['id']"
										},
										"sink": {
											"ordinal": 2
										}
									},
									{
										"source": {
											"path": "$['data'][0]['employee_name']"
										},
										"sink": {
											"ordinal": 3
										}
									},
									{
										"source": {
											"path": "$['data'][0]['employee_salary']"
										},
										"sink": {
											"ordinal": 4
										}
									},
									{
										"source": {
											"path": "$['data'][0]['employee_age']"
										},
										"sink": {
											"ordinal": 5
										}
									},
									{
										"source": {
											"path": "$['data'][0]['profile_image']"
										},
										"sink": {
											"ordinal": 6
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "RestResourceEMP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText_datelakefile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResourceEMP')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText_datelakefile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowFilter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filterdataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Filterdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EMPsource": {},
									"empdept": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Filterdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataflowDerivarionpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowderive",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowderive",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EMP": {},
									"EMPtgt": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowderive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_Agg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EMPAgg",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EMPAgg",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Emp": {},
									"EMPtgt": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EMPAgg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_Split')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowsplitdemo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowsplitdemo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EMP": {},
									"Deptno30": {},
									"EMP20": {},
									"Otherdeptno": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowsplitdemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Demo  On Filter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MetaData_List_of_List",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText_datelakefile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureDataLakeStoreReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter_Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MetaData_List_of_List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MetaData_List_of_List').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().name,'EMP')",
								"type": "Expression"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText_datelakefile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Demo Filter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Arayvalues",
								"type": "Expression"
							},
							"condition": {
								"value": "@greater(item(),5)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"Arayvalues": {
						"type": "array",
						"defaultValue": [
							1,
							2,
							3,
							4,
							5,
							6
						]
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Demo_Metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DatasetDelimitedTextBlobravi",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Waittest",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "AzureSqldataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextBlobravi')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqldataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicFileLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Getmetadatafile",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DatasetDelimitedTextBlobravi",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFileNames",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Getmetadatafile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Getmetadatafile').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LookupGetTabletoLoad",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[usp_GetTableTOLoad]",
											"storedProcedureParameters": {
												"SourceFileName": {
													"type": "String",
													"value": {
														"value": "@{item().name}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "AzureSqldataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "CopyDatatoStaging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupGetTabletoLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@{item().name}",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DatasetDelimitedTextBlobravi",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTableDynamic",
											"type": "DatasetReference",
											"parameters": {
												"StagingTableName": {
													"value": "@{activity('LookupGetTabletoLoad').output.firstRow.StagingTableName}",
													"type": "Expression"
												},
												"StagingSchemaName": {
													"value": "@{activity('LookupGetTabletoLoad').output.firstRow.StagingSchemaName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextBlobravi')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqldataset')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamicload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Foreach_multipletables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_ProcessControl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_ProcessControl').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LoadSQLtoSQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SourceAzureSqlTableDyn",
											"type": "DatasetReference",
											"parameters": {
												"SourceTableName": {
													"value": "@item().sourcetable_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TargetAzureSqlTableDyn",
											"type": "DatasetReference",
											"parameters": {
												"TargetTableName": {
													"value": "@item().targettable_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Lookup_ProcessControl",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "AzureSqldataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqldataset')]",
				"[concat(variables('factoryId'), '/datasets/SourceAzureSqlTableDyn')]",
				"[concat(variables('factoryId'), '/datasets/TargetAzureSqlTableDyn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/waitjobtest1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineEMP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select *from cars",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCoomman",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCoomman')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_VariableTestLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FileType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "loadingsqltables",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FileType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FileName'),'Sales')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Loading company",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@{variables('FileName')}",
													"type": "Expression"
												},
												"wildcardFileName": "*",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DatasetDelimitedTextBlobravi",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DatasetComapanytable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Loading Sales",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@{variables('FileName')}",
													"type": "Expression"
												},
												"wildcardFileName": "*",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DatasetDelimitedTextBlobravi",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqldataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"variables": {
					"FileName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextBlobravi')]",
				"[concat(variables('factoryId'), '/datasets/DatasetComapanytable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqldataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/masterpipine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DynamicFileLoad",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DynamicFileLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Notebook",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/mounting"
						},
						"linkedServiceName": {
							"referenceName": "LinkedAzureDatabricksrk",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedAzureDatabricksrk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineAlterDataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowAlterRow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowAlterRow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EMP": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowAlterRow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCopysqldbtocosmos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copydatasqltoblob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select *from emp",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AzureSqldataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Blobdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copydatablobtocosmos",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copydatasqltoblob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CosmosDbMongoDbApiSink",
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Blobdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CosmosDbMongoDbApiCollectiondataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Websendingemail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copydatasqltoblob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-30.eastus2.logic.azure.com:443/workflows/adeb5f675aef450a8e152380aeb812a2/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=eaReTMsHUms3HS6y_rz57TLEnjoZf7TvNrlUKc_Em0s",
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Metadata_upd",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copydatasqltoblob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[metadata_sp_ins]",
							"storedProcedureParameters": {
								"copyduration": {
									"value": {
										"value": "@activity('Copydatasqltoblob').output.CopyDuration",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"datafactoryname": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"datareads": {
									"value": {
										"value": "@activity('Copydatasqltoblob').output.dataread",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"datawrites": {
									"value": {
										"value": "@activity('Copydatasqltoblob').output.datawritten",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"executionenddate": {
									"value": {
										"value": "@activity('Copydatasqltoblob').ExecutionEndTime ",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"executionstarttime": {
									"value": {
										"value": "@activity('Copydatasqltoblob').ExecutionStartTime ",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"pipelineid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelinename": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": {
										"value": "@activity('Copydatasqltoblob').status",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqldataset')]",
				"[concat(variables('factoryId'), '/datasets/Blobdataset')]",
				"[concat(variables('factoryId'), '/datasets/CosmosDbMongoDbApiCollectiondataset')]",
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataBricks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/ravi.kumar@dxc.com/TestNoteBook"
						},
						"linkedServiceName": {
							"referenceName": "LinkedAzureDatabricksrk",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedAzureDatabricksrk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineWebHookActivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebReadtheFile",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://dummy.restapiexample.com/api/v1/employees",
							"method": "GET",
							"headers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineWranglingTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WranglingDataFlowtest1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "WranglingDataFlowtest1",
								"type": "DataFlowReference",
								"datasetParameters": {
									"DatasetDelimitedTextEMP": {},
									"Sink1": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/WranglingDataFlowtest1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinedataflowparameterize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataflowsParametarize",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowsParametarize",
								"type": "DataFlowReference",
								"parameters": {
									"Deptno": {
										"value": "@pipeline().parameters.Deptno",
										"type": "Expression"
									},
									"sourcesystem": {
										"value": "'@{pipeline().parameters.Sourcesystem}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"EMP": {},
									"fileparamvalues": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"parameters": {
					"Deptno": {
						"type": "int"
					},
					"Sourcesystem": {
						"type": "string",
						"defaultValue": "\"HMC\""
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataflowsParametarize')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineswitchactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.FolderName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Output1",
									"activities": [
										{
											"name": "Output1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "DatasetDelimitedTextBlobravi",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "Datasetdynamicfile",
													"type": "DatasetReference",
													"parameters": {
														"FolderName": {
															"value": "@pipeline().parameters.FolderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "Output2",
									"activities": [
										{
											"name": "Output2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "DatasetDelimitedTextBlobravi",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "Datasetdynamicfile",
													"type": "DatasetReference",
													"parameters": {
														"FolderName": {
															"value": "@pipeline().parameters.FolderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextBlobravi')]",
				"[concat(variables('factoryId'), '/datasets/Datasetdynamicfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableCoomman')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"StagingTableName": {
						"type": "string"
					},
					"StagingSchemaName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().StagingSchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().StagingTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqldataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blobdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedAzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "emp",
						"container": "target"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedAzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbMongoDbApiCollectiondataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceCosmosDbMongoDbApi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbMongoDbApiCollection",
				"schema": [],
				"typeProperties": {
					"collection": "adminacollection"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceCosmosDbMongoDbApi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetComapanytable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "company"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetDelimitedTextBlobravi')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedAzureBlobStorageravi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EMP2.csv",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "deptno",
						"type": "String"
					},
					{
						"name": "dname",
						"type": "String"
					},
					{
						"name": "loc",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedAzureBlobStorageravi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetDelimitedTextDEPT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedAzureBlobStorageravi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DEPT.csv",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "deptno",
						"type": "String"
					},
					{
						"name": "dname",
						"type": "String"
					},
					{
						"name": "loc",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedAzureBlobStorageravi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetDelimitedTextEMP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedAzureBlobStorageravi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EMP.csv",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empno",
						"type": "String"
					},
					{
						"name": "ename",
						"type": "String"
					},
					{
						"name": "job",
						"type": "String"
					},
					{
						"name": "mgr",
						"type": "String"
					},
					{
						"name": "hiredate",
						"type": "String"
					},
					{
						"name": "sal",
						"type": "String"
					},
					{
						"name": "comm",
						"type": "String"
					},
					{
						"name": "deptno",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedAzureBlobStorageravi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatasetDelimitedTextEmp_Dept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedAzureBlobStorageravi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedAzureBlobStorageravi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Datasetdynamicfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedAzureBlobStorageravi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"container": "ravicontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedAzureBlobStorageravi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextWranglefile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedAzureBlobStorageravi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedAzureBlobStorageravi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText_datelakefile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedServiceDataLake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureDataLakeStoreLocation",
						"folderPath": "Ravi"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedServiceDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedserviceDept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedAzureBlobStorageravi",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "DEPT.csv",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedAzureBlobStorageravi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResourceEMP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestServiceEMP",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestServiceEMP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceAzureSqlTableDyn')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().SourceTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetAzureSqlTableDyn')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LinkedServiceAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TargetTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TargetTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LinkedServiceAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedAzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connecting to Blob  rkblobstrg",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedAzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedAzureBlobStorageravi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedAzureBlobStorageravi_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedAzureDataLakeStore')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('LinkedAzureDataLakeStore_properties_typeProperties_dataLakeStoreUri')]",
					"servicePrincipalId": "[parameters('LinkedAzureDataLakeStore_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('LinkedAzureDataLakeStore_servicePrincipalKey')]"
					},
					"tenant": "[parameters('LinkedAzureDataLakeStore_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('LinkedAzureDataLakeStore_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('LinkedAzureDataLakeStore_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedAzureDatabricksrk')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://eastus2.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('LinkedAzureDatabricksrk_accessToken')]"
					},
					"existingClusterId": "0120-072819-lord666"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceAzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedServiceAzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceAzureBlobStorageDept')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedServiceAzureBlobStorageDept_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceAzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LinkedServiceAzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedServiceCosmosDbMongoDbApi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDbMongoDbApi",
				"typeProperties": {
					"connectionString": "[parameters('LinkedServiceCosmosDbMongoDbApi_connectionString')]",
					"database": "[parameters('LinkedServiceCosmosDbMongoDbApi_properties_typeProperties_database')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LinkedserviceAzureBlobStorageEmp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LinkedserviceAzureBlobStorageEmp_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LnkedsrvAzureSynapseAnalyticsrk')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('LnkedsrvAzureSynapseAnalyticsrk_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parameterize_LinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"DBServerName": {
						"type": "string"
					},
					"STG": {
						"type": "string"
					},
					"User_id": {
						"type": "string"
					},
					"Password": {
						"type": "string"
					},
					"EDW": {
						"type": "string"
					},
					"DM": {
						"type": "string"
					},
					"Domain Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('Parameterize_LinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestServiceEMP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "We are loading the file of employee",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServiceEMP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedServiceDataLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataLakeStore",
				"typeProperties": {
					"dataLakeStoreUri": "[parameters('linkedServiceDataLake_properties_typeProperties_dataLakeStoreUri')]",
					"servicePrincipalId": "[parameters('linkedServiceDataLake_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('linkedServiceDataLake_servicePrincipalKey')]"
					},
					"tenant": "[parameters('linkedServiceDataLake_properties_typeProperties_tenant')]",
					"subscriptionId": "[parameters('linkedServiceDataLake_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('linkedServiceDataLake_properties_typeProperties_resourceGroupName')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Loadoncondition')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Pipeline_VariableTestLoad",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileName": "[parameters('Loadoncondition_properties_Pipeline_VariableTestLoad_parameters_FileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/ravicontainer/blobs/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Loadoncondition_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Pipeline_VariableTestLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataflowLookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextDEPT",
								"type": "DatasetReference"
							},
							"name": "DEPT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "LookupResults"
						}
					],
					"transformations": [
						{
							"name": "Lookupempdept"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nsource(output(\n\t\tdeptno as string,\n\t\tdname as string,\n\t\tloc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> DEPT\nEMP, DEPT lookup(EMP@deptno == DEPT@deptno,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookupempdept\nLookupempdept sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['Emp_Dept_lookupResults.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LookupResults"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextDEPT')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflowexists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextDEPT",
								"type": "DatasetReference"
							},
							"name": "DEPT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "tgt"
						}
					],
					"transformations": [
						{
							"name": "ExistsDept"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nsource(output(\n\t\tdeptno as string,\n\t\tdname as string,\n\t\tloc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> DEPT\nEMP, DEPT exists(EMP@deptno == DEPT@deptno,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsDept\nExistsDept sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['empexits.csv'],\n\ttruncate: true,\n\tmapColumn(\n\t\tempno,\n\t\tename,\n\t\tjob,\n\t\tmgr,\n\t\thiredate,\n\t\tsal,\n\t\tcomm,\n\t\tdeptno\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tgt"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextDEPT')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataflowsParametarize')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "fileparamvalues"
						}
					],
					"transformations": [
						{
							"name": "Filtertingdeptno"
						},
						{
							"name": "DerivedColumnsourcesystem"
						},
						{
							"name": "Select1"
						}
					],
					"script": "parameters{\n\tDeptno as integer,\n\tsourcesystem as string\n}\nsource(output(\n\t\tempno as short,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as short,\n\t\thiredate as string,\n\t\tsal as short,\n\t\tcomm as short,\n\t\tdeptno as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP filter(deptno==$Deptno) ~> Filtertingdeptno\nFiltertingdeptno derive(sourcesystem = $sourcesystem) ~> DerivedColumnsourcesystem\nDerivedColumnsourcesystem select(mapColumn(\n\t\tsourcesystem,\n\t\tename,\n\t\tjob,\n\t\tmgr,\n\t\thiredate,\n\t\tsal,\n\t\tcomm,\n\t\tdeptno,\n\t\tempno\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['paramvalues'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fileparamvalues"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EMPAgg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "Emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "EMPtgt"
						}
					],
					"transformations": [
						{
							"name": "Aggregate"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Emp\nEmp aggregate(groupBy(deptno),\n\ttotal_sal = count(empno)) ~> Aggregate\nAggregate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['emp_Count.sv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> EMPtgt"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Emp_Dept_join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "Empdata"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextDEPT",
								"type": "DatasetReference"
							},
							"name": "Deptdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "target"
						}
					],
					"transformations": [
						{
							"name": "Join"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Empdata\nsource(output(\n\t\tdeptno as string,\n\t\tdname as string,\n\t\tloc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Deptdata\nEmpdata, Deptdata join(Empdata@deptno == Deptdata@deptno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['emp_dept'],\n\tmapColumn(\n\t\tempno,\n\t\tename,\n\t\tjob,\n\t\thiredate,\n\t\tsal,\n\t\tdname,\n\t\tloc\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> target"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextDEPT')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filterdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMPsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "empdept"
						}
					],
					"transformations": [
						{
							"name": "Filter"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMPsource\nEMPsource filter(equals(deptno, '30')) ~> Filter\nFilter sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EMPFILTER.csv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> empdept"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WranglingDataFlowtest1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DatasetDelimitedTextEMP",
							"script": "",
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							}
						}
					],
					"sinks": [
						{
							"name": "Sink1",
							"dataset": {
								"referenceName": "DelimitedTextWranglefile",
								"type": "DatasetReference"
							},
							"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Sink1"
						}
					],
					"script": "section Section1;\r\nshared DatasetDelimitedTextEMP = let\r\n  AdfDoc = AzureStorage.BlobContents(\"https://ravistorag1.blob.core.windows.net/demo/EMP.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared UserQuery = let\r\n  Source = DatasetDelimitedTextEMP\r\nin\r\n  Source;\r\n"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextWranglefile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableCoomman",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableCoomman",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EMP\nEMP sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCoomman')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowAlterRow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqldataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP alterRow(deleteIf(greater(sal,'2000'))) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqldataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUnion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextBlobravi",
								"type": "DatasetReference"
							},
							"name": "EMP2"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextDEPT",
								"type": "DatasetReference"
							},
							"name": "DEPT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "TGTUNION"
						}
					],
					"transformations": [
						{
							"name": "Union"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nsource(output(\n\t\tdeptno as string,\n\t\tdname as string,\n\t\tloc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP2\nsource(output(\n\t\tdeptno as string,\n\t\tdname as string,\n\t\tloc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> DEPT\nEMP, EMP2, DEPT union(byName: true)~> Union\nUnion sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['emp_union.csv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TGTUNION"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextBlobravi')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextDEPT')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowWindowtrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "tgtrank"
						}
					],
					"transformations": [
						{
							"name": "Window1"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as integer,\n\t\tcomm as string,\n\t\tdeptno as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP window(over(deptno),\n\tdesc(sal, true),\n\tsum = denseRank()) ~> Window1\nWindow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['rankfile.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tgtrank"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowderive')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "EMPtgt"
						}
					],
					"transformations": [
						{
							"name": "Derivedcommision"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP derive(comm = iif(isNull(comm),'0',comm),\n\t\tstartdate = currentDate('IST')) ~> Derivedcommision\nDerivedcommision sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['empdervie.csv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> EMPtgt"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowpivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "tgt"
						}
					],
					"transformations": [
						{
							"name": "Pivot"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP pivot(groupBy(deptno),\n\tpivotBy(ename),\n\t{} = count(empno),\n\tcolumnNaming: '$N$V',\n\tlateral: true) ~> Pivot\nPivot sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['emp.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tgt"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowselectTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "Tgt"
						}
					],
					"transformations": [
						{
							"name": "SelectColumnsTrans"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP select(mapColumn(\n\t\tempno,\n\t\tename,\n\t\tjob,\n\t\tsal,\n\t\tdeptno\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsTrans\nSelectColumnsTrans sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tgttranscolumns.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Tgt"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowsorter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "SorterEMP"
						}
					],
					"transformations": [
						{
							"name": "EMPSorter"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP sort(desc(ename, true),\n\tcaseInsensitive: true,\n\tpartitionLevel: true) ~> EMPSorter\nEMPSorter sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EMPSorter.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SorterEMP"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowsplitdemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "Deptno30"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "EMP20"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "Otherdeptno"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP split(equals(deptno,'30'),\n\tequals(deptno, '20'),\n\tdisjoint: false) ~> ConditionalSplit1@(Deptno30, Deptno20, OtherDeptno)\nConditionalSplit1@Deptno30 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EMP_30.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Deptno30\nConditionalSplit1@Deptno20 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EMP20'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> EMP20\nConditionalSplit1@OtherDeptno sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['OtherDeptno'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Otherdeptno"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowsurrogetKey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "Emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "tgt"
						}
					],
					"transformations": [
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "Select"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Emp\nEmp keyGenerate(output(sk as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 select(mapColumn(\n\t\tempno = sk,\n\t\tename,\n\t\tjob,\n\t\tmgr,\n\t\thiredate,\n\t\tsal,\n\t\tcomm,\n\t\tdeptno,\n\t\tsk = empno\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select\nSelect sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tgt"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEMP')]",
				"[concat(variables('factoryId'), '/datasets/DatasetDelimitedTextEmp_Dept')]"
			]
		}
	]
}