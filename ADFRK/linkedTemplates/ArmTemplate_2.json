{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFRK"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PipelineEMP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select *from cars",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCoomman",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_VariableTestLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FileType",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileName",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "loadingsqltables",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FileType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('FileName'),'Sales')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Loading company",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@{variables('FileName')}",
													"type": "Expression"
												},
												"wildcardFileName": "*",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DatasetDelimitedTextBlobravi",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DatasetComapanytable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Loading Sales",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@{variables('FileName')}",
													"type": "Expression"
												},
												"wildcardFileName": "*",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DatasetDelimitedTextBlobravi",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqldataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"variables": {
					"FileName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineCopysqldbtocosmos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copydatasqltoblob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select *from emp",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AzureSqldataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Blobdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copydatablobtocosmos",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copydatasqltoblob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CosmosDbMongoDbApiSink",
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Blobdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CosmosDbMongoDbApiCollectiondataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Websendingemail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copydatasqltoblob",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-30.eastus2.logic.azure.com:443/workflows/adeb5f675aef450a8e152380aeb812a2/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=eaReTMsHUms3HS6y_rz57TLEnjoZf7TvNrlUKc_Em0s",
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Metadata_upd",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copydatasqltoblob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[metadata_sp_ins]",
							"storedProcedureParameters": {
								"copyduration": {
									"value": {
										"value": "@activity('Copydatasqltoblob').output.CopyDuration",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"datafactoryname": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"datareads": {
									"value": {
										"value": "@activity('Copydatasqltoblob').output.dataread",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"datawrites": {
									"value": {
										"value": "@activity('Copydatasqltoblob').output.datawritten",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"executionenddate": {
									"value": {
										"value": "@activity('Copydatasqltoblob').ExecutionEndTime ",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"executionstarttime": {
									"value": {
										"value": "@activity('Copydatasqltoblob').ExecutionStartTime ",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"pipelineid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelinename": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"status": {
									"value": {
										"value": "@activity('Copydatasqltoblob').status",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LinkedServiceAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineswitchactivity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.FolderName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Output1",
									"activities": [
										{
											"name": "Output1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "DatasetDelimitedTextBlobravi",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "Datasetdynamicfile",
													"type": "DatasetReference",
													"parameters": {
														"FolderName": {
															"value": "@pipeline().parameters.FolderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "Output2",
									"activities": [
										{
											"name": "Output2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "DatasetDelimitedTextBlobravi",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "Datasetdynamicfile",
													"type": "DatasetReference",
													"parameters": {
														"FolderName": {
															"value": "@pipeline().parameters.FolderName",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataflowLookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextDEPT",
								"type": "DatasetReference"
							},
							"name": "DEPT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "LookupResults"
						}
					],
					"transformations": [
						{
							"name": "Lookupempdept"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nsource(output(\n\t\tdeptno as string,\n\t\tdname as string,\n\t\tloc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> DEPT\nEMP, DEPT lookup(EMP@deptno == DEPT@deptno,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookupempdept\nLookupempdept sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['Emp_Dept_lookupResults.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LookupResults"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflowexists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextDEPT",
								"type": "DatasetReference"
							},
							"name": "DEPT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "tgt"
						}
					],
					"transformations": [
						{
							"name": "ExistsDept"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nsource(output(\n\t\tdeptno as string,\n\t\tdname as string,\n\t\tloc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> DEPT\nEMP, DEPT exists(EMP@deptno == DEPT@deptno,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsDept\nExistsDept sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['empexits.csv'],\n\ttruncate: true,\n\tmapColumn(\n\t\tempno,\n\t\tename,\n\t\tjob,\n\t\tmgr,\n\t\thiredate,\n\t\tsal,\n\t\tcomm,\n\t\tdeptno\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tgt"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataflowsParametarize')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "fileparamvalues"
						}
					],
					"transformations": [
						{
							"name": "Filtertingdeptno"
						},
						{
							"name": "DerivedColumnsourcesystem"
						},
						{
							"name": "Select1"
						}
					],
					"script": "parameters{\n\tDeptno as integer,\n\tsourcesystem as string\n}\nsource(output(\n\t\tempno as short,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as short,\n\t\thiredate as string,\n\t\tsal as short,\n\t\tcomm as short,\n\t\tdeptno as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP filter(deptno==$Deptno) ~> Filtertingdeptno\nFiltertingdeptno derive(sourcesystem = $sourcesystem) ~> DerivedColumnsourcesystem\nDerivedColumnsourcesystem select(mapColumn(\n\t\tsourcesystem,\n\t\tename,\n\t\tjob,\n\t\tmgr,\n\t\thiredate,\n\t\tsal,\n\t\tcomm,\n\t\tdeptno,\n\t\tempno\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['paramvalues'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> fileparamvalues"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EMPAgg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "Emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "EMPtgt"
						}
					],
					"transformations": [
						{
							"name": "Aggregate"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Emp\nEmp aggregate(groupBy(deptno),\n\ttotal_sal = count(empno)) ~> Aggregate\nAggregate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['emp_Count.sv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> EMPtgt"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Emp_Dept_join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "Empdata"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextDEPT",
								"type": "DatasetReference"
							},
							"name": "Deptdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "target"
						}
					],
					"transformations": [
						{
							"name": "Join"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Empdata\nsource(output(\n\t\tdeptno as string,\n\t\tdname as string,\n\t\tloc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Deptdata\nEmpdata, Deptdata join(Empdata@deptno == Deptdata@deptno,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['emp_dept'],\n\tmapColumn(\n\t\tempno,\n\t\tename,\n\t\tjob,\n\t\thiredate,\n\t\tsal,\n\t\tdname,\n\t\tloc\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> target"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filterdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMPsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "empdept"
						}
					],
					"transformations": [
						{
							"name": "Filter"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMPsource\nEMPsource filter(equals(deptno, '30')) ~> Filter\nFilter sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EMPFILTER.csv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> empdept"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WranglingDataFlowtest1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "DatasetDelimitedTextEMP",
							"script": "",
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							}
						}
					],
					"sinks": [
						{
							"name": "Sink1",
							"dataset": {
								"referenceName": "DelimitedTextWranglefile",
								"type": "DatasetReference"
							},
							"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Sink1"
						}
					],
					"script": "section Section1;\r\nshared DatasetDelimitedTextEMP = let\r\n  AdfDoc = AzureStorage.BlobContents(\"https://ravistorag1.blob.core.windows.net/demo/EMP.csv\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared UserQuery = let\r\n  Source = DatasetDelimitedTextEMP\r\nin\r\n  Source;\r\n"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableCoomman",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableCoomman",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EMP\nEMP sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowAlterRow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqldataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP alterRow(deleteIf(greater(sal,'2000'))) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowUnion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextBlobravi",
								"type": "DatasetReference"
							},
							"name": "EMP2"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextDEPT",
								"type": "DatasetReference"
							},
							"name": "DEPT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "TGTUNION"
						}
					],
					"transformations": [
						{
							"name": "Union"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nsource(output(\n\t\tdeptno as string,\n\t\tdname as string,\n\t\tloc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP2\nsource(output(\n\t\tdeptno as string,\n\t\tdname as string,\n\t\tloc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> DEPT\nEMP, EMP2, DEPT union(byName: true)~> Union\nUnion sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['emp_union.csv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TGTUNION"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowWindowtrans')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "tgtrank"
						}
					],
					"transformations": [
						{
							"name": "Window1"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as integer,\n\t\tcomm as string,\n\t\tdeptno as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP window(over(deptno),\n\tdesc(sal, true),\n\tsum = denseRank()) ~> Window1\nWindow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['rankfile.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tgtrank"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowderive')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "EMPtgt"
						}
					],
					"transformations": [
						{
							"name": "Derivedcommision"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP derive(comm = iif(isNull(comm),'0',comm),\n\t\tstartdate = currentDate('IST')) ~> Derivedcommision\nDerivedcommision sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['empdervie.csv'],\n\ttruncate: true,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> EMPtgt"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowpivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "tgt"
						}
					],
					"transformations": [
						{
							"name": "Pivot"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP pivot(groupBy(deptno),\n\tpivotBy(ename),\n\t{} = count(empno),\n\tcolumnNaming: '$N$V',\n\tlateral: true) ~> Pivot\nPivot sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['emp.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> tgt"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowselectTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "Tgt"
						}
					],
					"transformations": [
						{
							"name": "SelectColumnsTrans"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP select(mapColumn(\n\t\tempno,\n\t\tename,\n\t\tjob,\n\t\tsal,\n\t\tdeptno\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsTrans\nSelectColumnsTrans sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tgttranscolumns.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Tgt"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowsorter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "SorterEMP"
						}
					],
					"transformations": [
						{
							"name": "EMPSorter"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP sort(desc(ename, true),\n\tcaseInsensitive: true,\n\tpartitionLevel: true) ~> EMPSorter\nEMPSorter sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EMPSorter.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SorterEMP"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowsplitdemo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEMP",
								"type": "DatasetReference"
							},
							"name": "EMP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "Deptno30"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "EMP20"
						},
						{
							"dataset": {
								"referenceName": "DatasetDelimitedTextEmp_Dept",
								"type": "DatasetReference"
							},
							"name": "Otherdeptno"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\tempno as string,\n\t\tename as string,\n\t\tjob as string,\n\t\tmgr as string,\n\t\thiredate as string,\n\t\tsal as string,\n\t\tcomm as string,\n\t\tdeptno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> EMP\nEMP split(equals(deptno,'30'),\n\tequals(deptno, '20'),\n\tdisjoint: false) ~> ConditionalSplit1@(Deptno30, Deptno20, OtherDeptno)\nConditionalSplit1@Deptno30 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EMP_30.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Deptno30\nConditionalSplit1@Deptno20 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EMP20'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> EMP20\nConditionalSplit1@OtherDeptno sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['OtherDeptno'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Otherdeptno"
				}
			},
			"dependsOn": []
		}
	]
}